) AS MainName
WHERE t_data.end_station_id = MainName.end_station_id
)
AND end_station_name NOT LIKE 'Public Rack - %'
AND end_station_name NOT LIKE '%TEMPORARY)'") # 135099 issues
name_end_fix <- dbGetQuery(con, "
SELECT
end_station_name,
end_station_id,
COUNT(*) AS n_trips
FROM t_data
WHERE
end_station_name NOT LIKE 'Public Rack - %' OR
end_station_name NOT LIKE '%TEMPORARY)'
GROUP BY end_station_name, end_station_id") %>%
group_by(end_station_id) %>%
summarise(
n_distinct_names = n_distinct(end_station_name),
count_trips = n_trips,
most_popular_name = end_station_name[which.max(n_trips)],
less_popular_name = end_station_name[which.min(n_trips)]
) %>%
filter(n_distinct_names > 1)
View(name_end_fix)
View(name_end_fix)
View(name_end_fix)
name_end_fix <- dbGetQuery(con, "
SELECT
end_station_name,
end_station_id,
COUNT(*) AS n_trips
FROM t_data
WHERE
end_station_name NOT LIKE 'Public Rack%' OR
end_station_name NOT LIKE '%TEMPORARY)'
GROUP BY end_station_name, end_station_id") %>%
group_by(end_station_id) %>%
summarise(
n_distinct_names = n_distinct(end_station_name),
count_trips = n_trips,
most_popular_name = end_station_name[which.max(n_trips)],
less_popular_name = end_station_name[which.min(n_trips)]
) %>%
filter(n_distinct_names > 1)
name_end_fix <- dbGetQuery(con, "
SELECT
end_station_name,
end_station_id,
COUNT(*) AS n_trips
FROM t_data
WHERE
end_station_name NOT LIKE 'Public Rack%' OR
end_station_name NOT LIKE '%TEMPORARY)'
GROUP BY end_station_name, end_station_id") %>%
group_by(end_station_id) %>%
summarise(
n_distinct_names = n_distinct(end_station_name),
count_trips = n_trips,
most_popular_name = end_station_name[which.max(n_trips)],
less_popular_name = end_station_name[which.min(n_trips)]
) %>%
filter(n_distinct_names > 1)
View(name_end_fix)
name_start_fix <- dbGetQuery(con, "
SELECT
start_station_name,
start_station_id,
COUNT(*) AS n_trips
FROM t_data
WHERE
start_station_name NOT LIKE 'Public Rack - %' OR
start_station_name NOT LIKE '%TEMPORARY)'
GROUP BY start_station_name, start_station_id") %>% # The filters where added after some checks
group_by(start_station_id) %>%
summarise(
n_distinct_names = n_distinct(start_station_name),
most_popular_name = start_station_name[which.max(n_trips)],
less_popular_name = start_station_name[which.min(n_trips)]
) %>%
filter(n_distinct_names > 1)
View(name_start_fix)
name_start_fix <- dbGetQuery(con, "
SELECT
start_station_name,
start_station_id,
COUNT(*) AS n_trips
FROM t_data
WHERE
start_station_name NOT LIKE 'Public Rack - %'
GROUP BY start_station_name, start_station_id") %>% # The filters where added after some checks
group_by(start_station_id) %>%
summarise(
n_distinct_names = n_distinct(start_station_name),
most_popular_name = start_station_name[which.max(n_trips)],
less_popular_name = start_station_name[which.min(n_trips)]
) %>%
filter(n_distinct_names > 1)
View(name_start_fix)
View(name_start_fix)
dbExecute(con, "
UPDATE t_data
SET start_station_name = (
SELECT main_name
FROM (
SELECT
start_station_id,
CASE
WHEN COUNT(DISTINCT start_station_name) = 1 THEN MAX(start_station_name)
WHEN COUNT(DISTINCT start_station_name) > 1 THEN MAX(start_station_name)
END AS main_name
FROM t_data
WHERE
end_station_name NOT LIKE 'Public Rack%' OR
end_station_name NOT LIKE '%TEMPORARY)
GROUP BY start_station_id
) AS MainName
WHERE t_data.start_station_id = MainName.start_station_id
)
WHERE start_station_name != (
SELECT main_name
FROM (
SELECT
start_station_id,
CASE
WHEN COUNT(DISTINCT start_station_name) = 1 THEN MAX(start_station_name)
WHEN COUNT(DISTINCT start_station_name) > 1 THEN MAX(start_station_name)
END AS main_name
FROM t_data
WHERE
end_station_name NOT LIKE 'Public Rack%' OR
end_station_name NOT LIKE '%TEMPORARY)
GROUP BY start_station_id
) AS MainName
WHERE t_data.start_station_id = MainName.start_station_id
)") # 134262 issues
# Add columns for trip duration, hour of the day, day of the week and month
dbExecute(con, "
ALTER TABLE t_data
ADD COLUMN trip_duration INT,
ADD COLUMN hour_of_day INT,
ADD COLUMN day_of_week INT,
ADD COLUMN month INT")
# Calculate trip duration in seconds, hour of the day, day of the week and month
dbExecute(con, "
UPDATE t_data
SET trip_duration = TIMESTAMPDIFF(SECOND, started_at, ended_at,
hour_of_day = HOUR(started_at),
day_of_week = DAYOFWEEK(started_at),
month = MONTH(started_at)")
dbExecute(con, "
ALTER TABLE t_data
ADD COLUMN trip_duration INT,
ADD COLUMN hour_of_day INT,
ADD COLUMN day_of_week INT,
ADD COLUMN month INT")
dbExecute(con, "
UPDATE t_data
SET trip_duration = TIMESTAMPDIFF(SECOND, started_at, ended_at,
hour_of_day = HOUR(started_at),
day_of_week = DAYOFWEEK(started_at),
month = MONTH(started_at)")
dbExecute(con, "
UPDATE t_data
SET trip_duration = TIMESTAMPDIFF(SECOND, started_at, ended_at),
hour_of_day = HOUR(started_at),
day_of_week = DAYOFWEEK(started_at),
month = MONTH(started_at)")
# Removing Z score > 3 and < -3
dbExecute(con, "
WITH Stats AS (
SELECT
AVG(trip_duration) AS mean,
STDDEV(trip_duration) AS stddev
FROM
t_data
),
ZScores AS (
SELECT
td.*,
(td.trip_duration - s.mean) / s.stddev AS z_score
FROM
t_data td, Stats s
)
SELECT * FROM ZScores WHERE ABS(z_score) <= 3;")
dbExecute(con, "
WITH Stats AS (
SELECT
AVG(trip_duration) AS mean,
STDDEV(trip_duration) AS stddev
FROM
t_data
),
ZScores AS (
SELECT
td.trip_duration,
(td.trip_duration - s.mean) / s.stddev AS z_score
FROM
t_data td, Stats s
)
DELETE FROM t_data
WHERE trip_duration IN (SELECT trip_duration from ZScores WHERE ABS(z_score) > 3);")
dbExecute(con, "
WITH Stats AS (
SELECT
AVG(trip_duration) AS mean,
STDDEV(trip_duration) AS stddev
FROM
t_data
),
ZScores AS (
SELECT
td.trip_duration,
(td.trip_duration - s.mean) / s.stddev AS z_score
FROM
t_data td, Stats s
)
DELETE FROM t_data
WHERE trip_duration IN (SELECT trip_duration from ZScores WHERE ABS(z_score) > 3);")
dbExecute(con, "
DELETE FROM t_data
WHERE trip_duration IN (
SELECT trip_duration FROM (
SELECT
td.trip_duration,
(td.trip_duration - avg_td.mean) / avg_td.stddev AS z_score
FROM
t_data td,
(SELECT
AVG(trip_duration) AS mean,
STDDEV(trip_duration) AS stddev
FROM t_data) AS avg_td
HAVING ABS(z_score) > 3
) AS outliers
);")
## Load libraries
library(tidyverse)
library(DBI)
library(RMySQL)
library(hrbrthemes)
library(viridis)
library(forcats)
# Connect to mySQL
con <- DBI::dbConnect(RMySQL::MySQL(),
dbname = sub(",$", "", Sys.getenv("DB_NAME")),
host = sub(",$", "", Sys.getenv("DB_HOST")),
username = sub(",$", "", Sys.getenv("DB_USER")),
password = sub(",$", "", Sys.getenv("DB_PSWD")))
# Load data
t_data <- DBI::dbGetQuery(con, "SELECT * FROM t_data")
## Load Head
head(t_data)
# Fix data types
t_data$started_at <- as.date(t_data$started_at)
# Fix data types
t_data$started_at <- as.datetype(t_data$started_at)
# Fix data types
t_data$started_at <- as.Date(t_data$started_at)
t_data$ended_at <- as.Date(t_data$ended_at)
## Load Head
head(t_data)
# Data manipulation for 100% of data
data <- t_data %>%
select(rideable_type, member_casual, trip_duration) %>%
mutate(duration = round(as.numeric(trip_duration)/60, 0))
# Data manipulation for quantile 95%
data_95 <- t_data %>%
select(rideable_type, member_casual, trip_duration) %>%
mutate(duration = round(as.numeric(trip_duration)/60, 0)) %>%
filter(quantile(trip_duration, 0.95) > trip_duration)
# Data manipulation for quantile 80%
data_80 <- t_data %>%
select(rideable_type, member_casual, trip_duration) %>%
mutate(duration = round(as.numeric(trip_duration)/60, 0)) %>%
filter(quantile(trip_duration, 0.80) > trip_duration)
data %>%
ggplot(aes(x = member_casual, y = trip_duration, fill = rideable_type)) +
geom_boxplot(alpha = 0.6) +
scale_fill_viridis(discrete = TRUE) +
scale_color_viridis(discrete = TRUE) +
theme_minimal() +
theme(
legend.position = "none",
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8)
) +
xlab("Type of User") +
ylab("Trip Duration") +
facet_wrap(vars(rideable_type), nrow = 3)
data_95 %>%
ggplot(aes(x = member_casual, y = trip_duration, fill = rideable_type)) +
geom_boxplot(alpha = 0.6) +
scale_fill_viridis(discrete = TRUE) +
scale_color_viridis(discrete = TRUE) +
theme_minimal() +
theme(
legend.position = "none",
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8)
) +
xlab("Type of User") +
ylab("Trip Duration") +
facet_wrap(vars(rideable_type), nrow = 3)
## Load libraries
library(tidyverse)
library(DBI)
library(RMySQL)
library(hrbrthemes)
library(viridis)
library(forcats)
# Connect to mySQL
con <- DBI::dbConnect(RMySQL::MySQL(),
dbname = sub(",$", "", Sys.getenv("DB_NAME")),
host = sub(",$", "", Sys.getenv("DB_HOST")),
username = sub(",$", "", Sys.getenv("DB_USER")),
password = sub(",$", "", Sys.getenv("DB_PSWD")))
# Load data
t_data <- DBI::dbGetQuery(con, "SELECT * FROM t_data")
```{r}
View(t_data)
# Data manipulation for ABS(Z-SCORE) >= 3
data <- t_data %>%
select(rideable_type, member_casual, trip_duration) %>%
mutate(duration = round(as.numeric(trip_duration)/60, 0)) %>%
filter(abs(scale(trip_duration)) >= 3)
View(data)
View(data)
```{r}
```{r}
# Data manipulation for ABS(Z-SCORE) >= 3
data <- t_data %>%
select(rideable_type, member_casual, trip_duration) %>%
mutate(duration = round(as.numeric(trip_duration)/60, 0)) %>%
filter(abs(scale(trip_duration)) <= 3)
# Data manipulation for ABS(Z-SCORE) >= 3 and remove duration < 60 seconds
data <- t_data %>%
select(rideable_type, member_casual, trip_duration) %>%
filter(trip_duration < 60) %>%
mutate(duration = round(as.numeric(trip_duration)/60, 0)) %>%
filter(abs(scale(as.numeric(trip_duration))) > 3)
View(data)
View(data)
# Data manipulation for ABS(Z-SCORE) >= 3 and remove duration < 60 seconds
data <- t_data %>%
select(rideable_type, member_casual, trip_duration) %>%
filter(trip_duration > 60) %>%
mutate(duration = round(as.numeric(trip_duration)/60, 0)) %>%
filter(abs(scale(as.numeric(trip_duration))) < 3)
# Data manipulation for ABS(Z-SCORE) >= 3 and remove duration < 60 seconds
data <- t_data %>%
select(rideable_type, member_casual, trip_duration)%>%
mutate(duration = round(as.numeric(trip_duration)/60, 0)) %>%
filter(abs(scale(as.numeric(trip_duration))) < 3) %>%
filter(trip_duration > 60)
# Data manipulation for ABS(Z-SCORE) >= 3 and remove duration < 60 seconds
data <- t_data %>%
select(rideable_type, member_casual, trip_duration)%>%
mutate(duration = round(as.numeric(trip_duration)/60, 0)) %>%
filter(trip_duration > 60)  %>%
filter(abs(scale(as.numeric(trip_duration))) < 3)
# Data manipulation for ABS(Z-SCORE) >= 3 and remove duration < 60 seconds
data <- t_data %>%
select(rideable_type, member_casual, trip_duration)%>%
mutate(duration = round(as.numeric(trip_duration)/60, 0)) %>%
filter(abs(scale(as.numeric(trip_duration))) < 3) %>%
filter(trip_duration > 60)
data %>%
ggplot(aes(x = member_casual, y = trip_duration, fill = rideable_type)) +
geom_boxplot(alpha = 0.6) +
scale_fill_viridis(discrete = TRUE) +
scale_color_viridis(discrete = TRUE) +
theme_minimal() +
theme(
legend.position = "none",
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8)
) +
xlab("Type of User") +
ylab("Trip Duration") +
facet_wrap(vars(rideable_type), nrow = 3)
# Data manipulation for ABS(Z-SCORE) >= 3 and remove duration < 60 seconds
data <- t_data %>%
select(rideable_type, member_casual, trip_duration)%>%
mutate(duration = round(as.numeric(trip_duration)/60, 0)) %>%
filter(abs(scale(as.numeric(trip_duration))) < 3) %>%
filter(trip_duration > 1)
# Data manipulation for ABS(Z-SCORE) >= 3 and remove duration < 60 seconds
data <- t_data %>%
select(rideable_type, member_casual, trip_duration) %>%
filter(trip_duration > 60) %>%
mutate(duration = round(as.numeric(trip_duration)/60, 0)) %>%
filter(abs(scale(as.numeric(trip_duration))) < 3)
data %>%
ggplot(aes(x = member_casual, y = trip_duration, fill = rideable_type)) +
geom_boxplot(alpha = 0.6) +
scale_fill_viridis(discrete = TRUE) +
scale_color_viridis(discrete = TRUE) +
theme_minimal() +
theme(
legend.position = "none",
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8)
) +
xlab("Type of User") +
ylab("Trip Duration") +
facet_wrap(vars(rideable_type), nrow = 3)
# Data manipulation for ABS(Z-SCORE) >= 3 and remove duration < 60 seconds
data <- t_data %>%
select(rideable_type, member_casual, trip_duration > 60) %>%
mutate(duration = round(as.numeric(trip_duration)/60, 0)) %>%
filter(abs(scale(as.numeric(trip_duration))) < 2)
# Data manipulation for ABS(Z-SCORE) >= 3 and remove duration < 60 seconds
data <- t_data %>%
select(rideable_type, member_casual, (trip_duration > 60) %>%
mutate(duration = round(as.numeric(trip_duration)/60, 0)) %>%
filter(abs(scale(as.numeric(trip_duration))) < 2)
# Data manipulation for ABS(Z-SCORE) >= 3 and remove duration < 60 seconds
data <- t_data %>%
select(rideable_type, member_casual, trip_duration) %>%
filter(trip_duration > 60) %>%
mutate(duration = round(as.numeric(trip_duration)/60, 0)) %>%
filter(abs(scale(as.numeric(trip_duration))) < 2)
data %>%
ggplot(aes(x = member_casual, y = trip_duration, fill = rideable_type)) +
geom_boxplot(alpha = 0.6) +
scale_fill_viridis(discrete = TRUE) +
scale_color_viridis(discrete = TRUE) +
theme_minimal() +
theme(
legend.position = "none",
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8)
) +
xlab("Type of User") +
ylab("Trip Duration") +
facet_wrap(vars(rideable_type), nrow = 3)
# Data manipulation for ABS(Z-SCORE) >= 3 and remove duration < 60 seconds
data <- t_data %>%
select(rideable_type, member_casual, trip_duration) %>%
filter(trip_duration > 0) %>%
mutate(duration = round(as.numeric(trip_duration)/60, 0)) %>%
filter(abs(scale(as.numeric(trip_duration))) < 3)
data %>%
ggplot(aes(x = member_casual, y = trip_duration, fill = rideable_type)) +
geom_boxplot(alpha = 0.6) +
scale_fill_viridis(discrete = TRUE) +
scale_color_viridis(discrete = TRUE) +
theme_minimal() +
theme(
legend.position = "none",
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8)
) +
xlab("Type of User") +
ylab("Trip Duration") +
facet_wrap(vars(rideable_type), nrow = 3)
## Bar Chart of Rideable Type by Member casual
data %>%
count(member_casual, rideable_type, name="n_trips") %>%
ggplot(aes(x = member_casual, y = n_trips, fill = rideable_type)) +
geom_col(alpha = 0.6) +
scale_fill_viridis(discrete = TRUE) +
scale_color_viridis(discrete = TRUE) +
labs(title = "Total of Trips by Member Type",
subtitle = "January 2024 to January 2025",
x = "Type of user",
y = "Total of Trips",
fill = "Rideable Type") +
theme_minimal()+
facet_wrap(vars(rideable_type))
data %>%
group_by(member_casual, rideable_type) %>%
summarise(total_duration = sum(as.numeric(trip_duration)/3600)) %>%
ggplot(aes(x = member_casual, y = total_duration, fill = rideable_type)) +
geom_col(alpha = 0.6) +
scale_fill_viridis(discrete = TRUE) +
scale_color_viridis(discrete = TRUE) +
labs(title = "Total hours by Member Type",
subtitle = "January 2024 to January 2025",
x = "Type of user",
y = "Total hours",
fill = "Rideable Type") +
theme_minimal()+
facet_wrap(vars(rideable_type))
data %>%
group_by(member_casual, rideable_type) %>%
summarise(total_duration = mean(as.numeric(trip_duration)/60)) %>%
ggplot(aes(x = member_casual, y = total_duration, fill = rideable_type)) +
geom_col(alpha = 0.6) +
scale_fill_viridis(discrete = TRUE) +
scale_color_viridis(discrete = TRUE) +
labs(title = "Average Minutes by Member Type",
subtitle = "January 2024 to January 2025",
x = "Type of user",
y = "Average of Minutes",
fill = "Rideable Type") +
theme_minimal()+
facet_wrap(vars(rideable_type))
# Plot
data %>%
ggplot(aes(x = trip_duration, color = rideable_type, fill = rideable_type)) +
geom_histogram(alpha = 0.6, binwidth = 5) +
scale_fill_viridis(discrete = TRUE) +
scale_color_viridis(discrete = TRUE) +
theme_minimal() +
theme(
legend.position = "none",
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8)
) +
xlab("Trip Duration") +
ylab("Count") +
facet_wrap(vars(rideable_type,member_casual), nrow = 3)
